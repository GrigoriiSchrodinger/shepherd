from aiogram import Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import database, logger
from middleware.permissions import rights_required, check_edit_permission
from utils.formatters import format_revenue

# === –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ===
PARAMS = {
    "–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ–±–æ—Ä–æ—Ç–∞": "turnover_days_max",
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞": "revenue_min",
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
    "–î–∞—Ç—ã": "dates",
    "–ü—Ä–∞–≤–∞": "rights"
}

# === Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä" ===
@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def edit_param_callback(callback: types.CallbackQuery):
    try:
        data = callback.data.split(":")
        if len(data) != 3:
            return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

        _, param, target_username = data
        current_user = callback.from_user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not check_edit_permission(current_user, target_username):
            logger.warning(f"‚ùå {current_user} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {target_username}")
            return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
        database.set_pending_edit(current_user, param, target_username)
        await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è *{param}*:", parse_mode="Markdown")

        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ edit_param_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ===
@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def handle_new_param_value(message: types.Message):
    username = message.from_user.username
    text = message.text.strip()

    pending = database.get_pending_edit(username)
    if not pending:
        return

    param = pending["param"]
    target_username = pending["target"]

    logger.info(f"üíæ {username} –æ–±–Ω–æ–≤–ª—è–µ—Ç {param} —É {target_username} ‚Üí {text}")

    try:
        # --- –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û –¢–ò–ü–£ ---
        if param == "dates":
            value = int(text)
            if not (1 <= value <= 60):
                return await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60.")

        elif param == "revenue_min":
            try:
                value = float(text.replace(",", "."))
            except ValueError:
                return await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 2500.50).")

        elif param == "turnover_days_max":
            value = int(text)
            if value < 1:
                return await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ–±–æ—Ä–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")

        elif param == "category":
            value = text.strip()
            if not value:
                return await message.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")

        elif param == "rights":
            value = text.strip()
            if not value:
                return await message.answer("‚ö†Ô∏è –ü—Ä–∞–≤–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")

        else:
            value = text

        # --- –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î ---
        database.update_user_param(target_username, param, value)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_name = "—Å–µ–±—è" if target_username == username else f"@{target_username}"
        if param == "revenue_min":
            formatted_value = format_revenue(value)
        else:
            formatted_value = str(value)

        await message.answer(
            f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä *{param}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω —É {display_name}: `{formatted_value}`",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        database.clear_pending_edit(username)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
def setup_edit_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(edit_param_callback, F.data.startswith("edit:"))
    dp.message.register(handle_new_param_value)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
