import os
import json
from datetime import datetime, timedelta
from io import BytesIO
from typing import List, Dict

import pandas as pd
from aiogram import Dispatcher, types, Bot
from aiogram.filters import Command

from api.mpstats_api import MpstatsAPI
from api.mpstats_module import MpstatsData, Product
from config import logger

DATE_FORMAT = "%Y-%m-%d"
DEFAULT_CATEGORY = "–ñ–µ–Ω—â–∏–Ω–∞–º/–¢–æ–ª—Å—Ç–æ–≤–∫–∏, —Å–≤–∏—Ç—à–æ—Ç—ã –∏ —Ö—É–¥–∏"

class ExcelReportGenerator:
    def __init__(self):
        self.api = MpstatsAPI(os.getenv('MPSTATS_API_TOKEN'))
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def generate_excel_report(
        self,
        start_date: str,
        end_date: str,
        category: str = DEFAULT_CATEGORY
    ) -> BytesIO:
        try:
            self._validate_dates(start_date, end_date)
            products, raw_response = await self._fetch_api_data(start_date, end_date, category)
            df = self._prepare_report_data(products, start_date, end_date)
            return self._create_excel(df)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
            raise

    def _validate_dates(self, start_date: str, end_date: str) -> None:
        now = datetime.now().date()
        
        try:
            start_dt = datetime.strptime(start_date, DATE_FORMAT).date()
            end_dt = datetime.strptime(end_date, DATE_FORMAT).date()
        except ValueError as e:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD") from e

        if start_dt > end_dt:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            
        if start_dt > now or end_dt > now:
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞—Ç—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ")

    async def _fetch_api_data(
        self,
        start_date: str,
        end_date: str,
        category: str
    ) -> tuple[List[Product], dict]:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {category} —Å {start_date} –ø–æ {end_date}")
        raw_data = await self.api.get_category_data(start_date, end_date, category)
        logger.debug("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:\n%s", json.dumps(raw_data, indent=2, ensure_ascii=False))
        items = raw_data.get("data", []) if isinstance(raw_data, dict) else raw_data
        return MpstatsData(items).products, raw_data

    def _prepare_report_data(
        self,
        products: List[Product],
        start_date: str,
        end_date: str
    ) -> pd.DataFrame:
        report = []
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        for idx, product in enumerate(products, 1):
            try:
                report.append({
                    '‚Ññ': idx,
                    '–ù–∞–∑–≤–∞–Ω–∏–µ': product.name,
                    '–í—ã—Ä—É—á–∫–∞': self._format_currency(getattr(product, 'revenue', 0)),
                    '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': self._get_turnover_value(product.raw_data),
                    '–°—Å—ã–ª–∫–∞ WB': self._get_wb_link(product.id),
                    'MPStats': self._build_mpstats_link(product.id, start_date, end_date)
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ #{idx}: {str(e)}")
        return pd.DataFrame(report)

    def _get_turnover_value(self, raw_data: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∏–∑ turnover_days"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏
            turnover_days = raw_data.get('turnover_days')
            
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
            if turnover_days is None:
                logger.warning("–ü–∞—Ä–∞–º–µ—Ç—Ä turnover_days –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")
                return "–ù/–î"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
            return f"{int(turnover_days)} –¥–Ω."

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏: {str(e)}")
            return "–û—à–∏–±–∫–∞"

    def _get_wb_link(self, product_id: int) -> str:
        return f"https://www.wb.ru/catalog/{product_id}/detail.aspx"

    def _build_mpstats_link(
        self,
        product_id: int,
        start_date: str,
        end_date: str
    ) -> str:
        start_fmt = datetime.strptime(start_date, DATE_FORMAT).strftime("%d.%m.%Y")
        end_fmt = datetime.strptime(end_date, DATE_FORMAT).strftime("%d.%m.%Y")
        return f"https://mpstats.io/wb/item/{product_id}?d1={start_fmt}&d2={end_fmt}"

    def _format_currency(self, value: float) -> str:
        return f"{int(value):,} ‚ÇΩ".replace(',', ' ') if value > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    def _create_excel(self, df: pd.DataFrame) -> BytesIO:
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–¢–æ–≤–∞—Ä—ã')
            
            workbook = writer.book
            worksheet = writer.sheets['–¢–æ–≤–∞—Ä—ã']
            
            columns_config = {
                'A': 10,  # ‚Ññ
                'B': 50,  # –ù–∞–∑–≤–∞–Ω–∏–µ
                'C': 20,  # –í—ã—Ä—É—á–∫–∞
                'D': 20,  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å
                'E': 50,  # –°—Å—ã–ª–∫–∞ WB
                'F': 60   # MPStats
            }
            
            for col, width in columns_config.items():
                worksheet.set_column(f'{col}:{col}', width)
                
        output.seek(0)
        return output

report_generator = ExcelReportGenerator()


async def products_command(message: types.Message, bot: Bot) -> None:
    try:
        now = datetime.now()
        end_date = (now - timedelta(days=1)).strftime(DATE_FORMAT)
        start_date = (now - timedelta(days=30)).strftime(DATE_FORMAT)
        category = DEFAULT_CATEGORY

        processing_msg = await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        excel_file = await report_generator.generate_excel_report(start_date, end_date)

        
        caption = (
            "üìä –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º\n\n"
            "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
            f"‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
            f"‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
        )
        
        await message.answer_document(
            types.BufferedInputFile(
                file=excel_file.getvalue(),
                filename=f"WB_report_{datetime.now().strftime('%d.%m.%Y')}.xlsx"
            ),
            caption=caption
        )

        await bot.delete_message(
            chat_id=processing_msg.chat.id,
            message_id=processing_msg.message_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def setup(dp: Dispatcher) -> None:
    dp.message.register(products_command, Command("products"))
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /products –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")