# handlers/new_user.py
from datetime import datetime, timedelta
from asyncio import sleep
from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import logger, database
from middleware.permissions import rights_required, check_edit_permission
from utils.formatters import escape_md


@rights_required(["root"])
async def new_user_command(message: types.Message):
    """/newuser <username> ‚Äî –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (root only)."""
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2 or not args[1].strip():
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/newuser username`", parse_mode=None)
            return

        new_username = args[1].strip().lstrip("@")

        if database.user_exists(new_username):
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{escape_md(new_username)}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode=None)
            return

        kb = InlineKeyboardBuilder()
        options = [
            ("+1 –¥–µ–Ω—å", 1),
            ("+14 –¥–Ω–µ–π", 14),
            ("+30 –¥–Ω–µ–π", 30),
            ("+90 –¥–Ω–µ–π", 90),
            ("–ë–µ—Å—Å—Ä–æ—á–Ω–æ", 0)
        ]
        for label, val in options:
            kb.button(text=label, callback_data=f"create_user:{new_username}:{val}")
        kb.adjust(3)

        await message.answer(
            f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{escape_md(new_username)}`\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞:",
            parse_mode=None,
            reply_markup=kb.as_markup()
        )

        logger.info(f"{message.from_user.username} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_username}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ new_user_command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode=None)


@rights_required(["root"])
async def create_user_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–æ–∫–∞–∑ info."""
    try:
        parts = (callback.data or "").split(":")
        if len(parts) != 3:
            return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

        _, username, days = parts
        days = int(days)
        actor = callback.from_user.username or str(callback.from_user.id)

        # –≤—ã—á–∏—Å–ª—è–µ–º access_until
        if days == 0:
            access_until = "31.12.2099"
        else:
            access_until = (datetime.today() + timedelta(days=days)).strftime("%d.%m.%Y")

        # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "username": username,
            "rights": "user",
            "dates": 30,
            "turnover_days_max": 30,
            "revenue_min": 300000,
            "category": "–ñ–µ–Ω—â–∏–Ω–∞–º",
            "percent": 20.0,
            "access_until": access_until
        }

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        database.add_user(user_data)
        logger.info(f"{actor} —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å –¥–æ—Å—Ç—É–ø–æ–º –¥–æ {access_until}")

        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await callback.message.delete()
        except Exception:
            pass

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = await callback.message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{escape_md(username)}` —Å–æ–∑–¥–∞–Ω.\nüîë –î–æ—Å—Ç—É–ø –¥–æ: `{escape_md(access_until)}`",
            parse_mode=None
        )

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ /info) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
        await _send_info_for_username(callback.message.chat.id, actor, username)

        # —É–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å —á–∞—Ç
        await sleep(3)
        try:
            await confirm.delete()
        except Exception:
            pass

        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ create_user_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)


async def _send_info_for_username(chat_id: int, requester_username: str, target_username: str):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –≤ /info –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π chat_id.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not database.user_exists(target_username):
        await _safe_send(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{escape_md(target_username)}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", parse_mode=None)
        return

    user_data = database.get_user(target_username)
    if not user_data:
        await _safe_send(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è `{escape_md(target_username)}`.", parse_mode=None)
        return

    is_self = (target_username == requester_username)
    display_name = "—Å–µ–±—è" if is_self else f"`{escape_md(target_username)}`"
    rights = user_data.get("rights", "user")
    category = user_data.get("category", "‚Äî")
    drop_percent = user_data.get("percent", 0)

    # –î–∞—Ç—ã
    today = datetime.today().date()
    dates_count = int(user_data.get("dates", 0) or 0)
    end_date = today - timedelta(days=1)
    if dates_count > 0:
        start_date = end_date - timedelta(days=dates_count - 1)
        dates_text = f"{dates_count} –¥–Ω–µ–π (—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')})"
    else:
        dates_text = "–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"

    raw_access_until = user_data.get('access_until', '01.01.2000') or '01.01.2000'
    access_until = "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" if raw_access_until.strip() == "01.01.2000" else raw_access_until

    info_text = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {display_name}:\n\n"
    if not (rights == "moder" and is_self):
        info_text += f"–ü—Ä–∞–≤–∞: `{escape_md(str(rights))}`\n"
    info_text += (
        f"–î–∞—Ç—ã: {escape_md(dates_text)}\n"
        f"–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ–±–æ—Ä–æ—Ç–∞: `{escape_md(str(user_data.get('turnover_days_max', '‚Äî')))}`\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: `{escape_md(str(user_data.get('revenue_min', '‚Äî')))}`\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{escape_md(str(category))}`\n"
        f"–ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è (%): `{escape_md(str(drop_percent))}`\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: `{escape_md(access_until)}`"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–∞–∫ –≤ info_command) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ requester –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    kb = InlineKeyboardBuilder()
    requester = database.get_user(requester_username) or {}
    requester_rights = requester.get("rights", "user")
    can_edit = check_edit_permission(requester_username, target_username)

    if can_edit:
        if requester_rights == "root":
            edit_params = ["rights", "turnover_days_max", "revenue_min", "category", "dates", "percent", "access_until"]
        elif requester_rights == "admin":
            edit_params = ["turnover_days_max", "revenue_min", "category", "dates", "percent"]
        elif requester_rights == "moder":
            edit_params = ["turnover_days_max", "revenue_min", "category", "dates", "percent"]
        else:
            edit_params = []

        labels = {
            "rights": "üõ† –ü—Ä–∞–≤–∞",
            "turnover_days_max": "üìà –û–±–æ—Ä–æ—Ç",
            "revenue_min": "üí∞ –í—ã—Ä—É—á–∫–∞",
            "category": "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            "dates": "üìÖ –î–∞—Ç—ã",
            "percent": "üìâ –ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è %",
            "access_until": "üîë –î–æ—Å—Ç—É–ø"
        }

        for param in edit_params:
            kb.button(text=labels[param], callback_data=f"edit:{param}:{target_username}")
        kb.adjust(2)

    await _safe_send(chat_id, info_text, reply_markup=kb.as_markup() if can_edit else None, parse_mode=None)


async def _safe_send(chat_id: int, text: str, **send_kwargs):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ Telegram –Ω–µ –ª–æ–º–∞–ª–∏ –ª–æ–≥–∏–∫—É)."""
    try:
        # –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        from config import bot
        await bot.send_message(chat_id, text, **send_kwargs)
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")


def setup_new_user(dp: Dispatcher):
    dp.message.register(new_user_command, Command("newuser"))
    dp.callback_query.register(create_user_callback, F.data.startswith("create_user:"))
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /newuser –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
