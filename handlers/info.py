from asyncio import sleep
from datetime import datetime, timedelta
from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import database, logger
from middleware.permissions import rights_required, check_edit_permission
from utils.formatters import format_revenue, escape_md


# === /info ===
@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def info_command(message: types.Message):
    args = message.text.split(maxsplit=1)
    target_username = args[1] if len(args) > 1 else message.from_user.username or "unknown_user"
    current_user = message.from_user.username or "unknown_user"

    if not database.user_exists(target_username):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{escape_md(target_username)}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode="Markdown")
        return

    user_data = database.get_user(target_username)
    if not user_data:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è `{escape_md(target_username)}`.", parse_mode="Markdown")
        return

    is_self = (target_username == current_user)
    display_name = "—Å–µ–±—è" if is_self else f"`{escape_md(target_username)}`"
    rights = escape_md(user_data.get('rights'))
    category = escape_md(user_data.get('category'))
    drop_percent = user_data.get('percent', 0)
    access_until = user_data.get('access_until', '–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

    # –î–∞—Ç—ã
    today = datetime.today().date()
    dates_count = user_data.get('dates', 0)
    end_date = today - timedelta(days=1)
    start_date = end_date - timedelta(days=dates_count - 1) if dates_count > 0 else end_date
    dates_text = f"{dates_count} –¥–Ω–µ–π (—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')})" if dates_count > 0 else "–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"

    # === –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ===
    raw_access_until = user_data.get('access_until', '01.01.2000')
    if raw_access_until.strip() == "01.01.2000":
        access_until = "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
    else:
        access_until = raw_access_until

    info_text = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {display_name}:\n\n"
    if rights != "moder" or not is_self:
        info_text += f"–ü—Ä–∞–≤–∞: {rights}\n"
    info_text += (
        f"–î–∞—Ç—ã: {dates_text}\n"
        f"–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ–±–æ—Ä–æ—Ç–∞: {user_data.get('turnover_days_max')}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {format_revenue(user_data.get('revenue_min'))}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è (%): {drop_percent}\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: {access_until}"
    )


    kb = InlineKeyboardBuilder()
    user_rights = database.get_user(current_user).get("rights", "user")

    # === –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
    edit_params = []
    if user_rights == "root":
        edit_params = ["rights", "turnover_days_max", "revenue_min", "category", "dates", "percent", "access_until"]
    elif user_rights == "admin":
        edit_params = ["turnover_days_max", "revenue_min", "category", "dates", "percent", "access_until"]
    elif user_rights == "moder" and is_self:
        edit_params = ["turnover_days_max", "revenue_min", "category", "dates", "percent", "access_until"]

    labels = {
        "rights": "üõ† –ü—Ä–∞–≤–∞",
        "turnover_days_max": "üìà –û–±–æ—Ä–æ—Ç",
        "revenue_min": "üí∞ –í—ã—Ä—É—á–∫–∞",
        "category": "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "dates": "üìÖ –î–∞—Ç—ã",
        "percent": "üìâ –ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è %",
        "access_until": "üîë –î–æ—Å—Ç—É–ø"
    }

    for param in edit_params:
        kb.button(text=labels[param], callback_data=f"edit:{param}:{target_username}")

    kb.adjust(2)
    await message.answer(info_text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    logger.info(f"{current_user} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {target_username}")


# === –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def edit_param_callback(callback: types.CallbackQuery):
    try:
        data = callback.data.split(":")
        if len(data) != 3:
            return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

        _, param, target_username = data
        current_user = callback.from_user.username

        if not check_edit_permission(current_user, target_username):
            return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

        delete_after = []  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if param == "dates":
            kb = InlineKeyboardBuilder()
            for d in [7, 14, 30]:
                kb.button(text=f"{d} –¥–Ω–µ–π", callback_data=f"edit_value:{param}:{d}:{target_username}")
            kb.adjust(3)
            msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", reply_markup=kb.as_markup())
            delete_after.append(msg)

        elif param == "rights":
            kb = InlineKeyboardBuilder()
            for r in ["root", "admin", "moder", "user"]:
                kb.button(text=r, callback_data=f"edit_value:{param}:{r}:{target_username}")
            kb.adjust(4)
            msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞:", reply_markup=kb.as_markup())
            delete_after.append(msg)

        elif param == "access_until":
            kb = InlineKeyboardBuilder()
            options = [
                ("+1 –¥–µ–Ω—å", 1), ("+14 –¥–Ω–µ–π", 14), ("+30 –¥–Ω–µ–π", 30),
                ("+90 –¥–Ω–µ–π", 90), ("–ë–µ—Å—Å—Ä–æ—á–Ω–æ", 0), ("–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", -1)
            ]
            for label, val in options:
                kb.button(text=label, callback_data=f"edit_access:{val}:{target_username}")
            kb.adjust(3)
            msg = await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=kb.as_markup())
            delete_after.append(msg)

        else:
            # –û–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
            database.set_pending_edit(current_user, param, target_username)
            msg = await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è *{param}*:", parse_mode="Markdown")
            delete_after.append(msg)

        await callback.answer()

        # –£–¥–∞–ª—è–µ–º —ç—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await sleep(10)
        for m in delete_after:
            try:
                await m.delete()
            except Exception:
                pass

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ edit_param_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ (dates, rights, access_until) ===
@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def edit_value_callback(callback: types.CallbackQuery):
    try:
        data = callback.data.split(":")
        current_user = callback.from_user.username

        if data[0] == "edit_value":
            _, param, value, target_username = data
            if not check_edit_permission(current_user, target_username):
                return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

            if param == "dates":
                value = int(value)

            database.update_user_param(target_username, param, value)
            confirm = await callback.message.answer(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä *{param}* –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {value}", parse_mode="Markdown")
            await callback.answer()

        elif data[0] == "edit_access":
            _, days, target_username = data
            days = int(days)

            if not check_edit_permission(current_user, target_username):
                return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

            if days == -1:
                new_date = "01.01.2000"
            elif days == 0:
                new_date = "31.12.2099"
            else:
                new_date_obj = datetime.today() + timedelta(days=days)
                new_date = new_date_obj.strftime("%d.%m.%Y")

            database.update_user_param(target_username, "access_until", new_date)
            confirm = await callback.message.answer(
                f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è @{target_username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ {new_date}",
                parse_mode="Markdown"
            )
            await callback.answer()

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await sleep(3)
            try:
                await confirm.delete()
            except Exception:
                pass

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ edit_value_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
def setup_info(dp: Dispatcher):
    dp.message.register(info_command, Command("info"))
    dp.callback_query.register(edit_param_callback, F.data.startswith("edit:"))
    dp.callback_query.register(edit_value_callback, F.data.startswith(("edit_value:", "edit_access:")))
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /info –∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
