from asyncio import sleep
from datetime import datetime, timedelta
from aiogram import Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command

from config import logger, database
from middleware.permissions import rights_required, check_edit_permission
from utils.formatters import escape_md


@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def info_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (/info [username])."""
    try:
        args = message.text.split(maxsplit=1)
        current_user = message.from_user.username or str(message.from_user.id)

        if len(args) > 1 and args[1].strip():
            target_username = args[1].lstrip("@")
        else:
            target_username = current_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if not database.user_exists(target_username):
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{escape_md(target_username)}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode=None
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä ‚Äî –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —É–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –≤—ã–∑–æ–≤ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ä–æ–ª–µ–π,
        # –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ check_edit_permission (moder –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–±—è)
        if not check_edit_permission(current_user, target_username) and current_user != target_username:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
            return

        user_data = database.get_user(target_username)
        if not user_data:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è `{escape_md(target_username)}`.", parse_mode=None)
            return

        is_self = (target_username == current_user)
        display_name = "—Å–µ–±—è" if is_self else f"`{escape_md(target_username)}`"
        rights = user_data.get("rights", "user")
        category = user_data.get("category", "‚Äî")
        drop_percent = user_data.get("percent", 0)
        raw_access_until = user_data.get("access_until", "01.01.2000") or "01.01.2000"
        access_until = "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" if raw_access_until.strip() == "01.01.2000" else raw_access_until

        # –î–∞—Ç—ã
        today = datetime.today().date()
        dates_count = int(user_data.get("dates", 0) or 0)
        end_date = today - timedelta(days=1)
        if dates_count > 0:
            start_date = end_date - timedelta(days=dates_count - 1)
            dates_text = f"{dates_count} –¥–Ω–µ–π (—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')})"
        else:
            dates_text = "–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        info_text = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {display_name}:\n\n"
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ target ‚Äî moder –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–Ω —Å–∞–º (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        if not (rights == "moder" and is_self):
            info_text += f"–ü—Ä–∞–≤–∞: `{escape_md(str(rights))}`\n"
        info_text += (
            f"–î–∞—Ç—ã: {escape_md(dates_text)}\n"
            f"–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ–±–æ—Ä–æ—Ç–∞: `{escape_md(str(user_data.get('turnover_days_max', '‚Äî')))}`\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: `{escape_md(str(user_data.get('revenue_min', '‚Äî')))}`\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{escape_md(str(category))}`\n"
            f"–ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è (%): `{escape_md(str(drop_percent))}`\n"
            f"–î–æ—Å—Ç—É–ø –¥–æ: `{escape_md(str(access_until))}`"
        )

        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        kb = InlineKeyboardBuilder()
        caller = database.get_user(current_user) or {}
        caller_rights = caller.get("rights", "user")

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å target
        can_edit = check_edit_permission(current_user, target_username)

        if can_edit:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
            if caller_rights == "root":
                edit_params = ["rights", "turnover_days_max", "revenue_min", "category", "dates", "percent", "access_until"]
            elif caller_rights == "admin":
                edit_params = ["turnover_days_max", "revenue_min", "category", "dates", "percent"]
            elif caller_rights == "moder":
                edit_params = ["turnover_days_max", "revenue_min", "category", "dates", "percent"]
            else:
                edit_params = []

            labels = {
                "rights": "üõ† –ü—Ä–∞–≤–∞",
                "turnover_days_max": "üìà –û–±–æ—Ä–æ—Ç",
                "revenue_min": "üí∞ –í—ã—Ä—É—á–∫–∞",
                "category": "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                "dates": "üìÖ –î–∞—Ç—ã",
                "percent": "üìâ –ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è %",
                "access_until": "üîë –î–æ—Å—Ç—É–ø"
            }

            for param in edit_params:
                kb.button(text=labels[param], callback_data=f"edit:{param}:{target_username}")
            kb.adjust(2)

        await message.answer(info_text, parse_mode=None, reply_markup=kb.as_markup() if can_edit else None)
        logger.info(f"{current_user} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {target_username}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ info_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", parse_mode=None)


@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def edit_param_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞."""
    try:
        data = (callback.data or "").split(":")
        if len(data) != 3:
            return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

        _, param, target_username = data
        current_user = callback.from_user.username or str(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not check_edit_permission(current_user, target_username):
            return await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

        delete_after = []

        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
        if param == "dates":
            kb = InlineKeyboardBuilder()
            for d in [7, 14, 30]:
                kb.button(text=f"{d} –¥–Ω–µ–π", callback_data=f"edit_value:{param}:{d}:{target_username}")
            kb.adjust(3)
            msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", reply_markup=kb.as_markup())
            delete_after.append(msg)

        elif param == "rights":
            kb = InlineKeyboardBuilder()
            for r in ["root", "admin", "moder", "user"]:
                kb.button(text=r, callback_data=f"edit_value:{param}:{r}:{target_username}")
            kb.adjust(4)
            msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞:", reply_markup=kb.as_markup())
            delete_after.append(msg)

        elif param == "access_until":
            kb = InlineKeyboardBuilder()
            options = [
                ("+1 –¥–µ–Ω—å", 1), ("+14 –¥–Ω–µ–π", 14), ("+30 –¥–Ω–µ–π", 30),
                ("+90 –¥–Ω–µ–π", 90), ("–ë–µ—Å—Å—Ä–æ—á–Ω–æ", 0), ("–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", -1)
            ]
            for label, val in options:
                kb.button(text=label, callback_data=f"edit_access:{val}:{target_username}")
            kb.adjust(3)
            msg = await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=kb.as_markup())
            delete_after.append(msg)

        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            database.set_pending_edit(current_user, param, target_username)
            msg = await callback.message.answer(
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è `{escape_md(param)}`:",
                parse_mode=None
            )
            delete_after.append(msg)

        await callback.answer()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await sleep(10)
        for m in delete_after:
            try:
                await m.delete()
            except Exception:
                pass

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ edit_param_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def edit_value_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è (dates, rights, access_until –∏ —Ç.–ø.)."""
    try:
        data = (callback.data or "").split(":")
        current_user = callback.from_user.username or str(callback.from_user.id)

        if not data:
            return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

        if data[0] == "edit_value":
            _, param, value, target_username = data

            if not check_edit_permission(current_user, target_username):
                return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)

            if param == "dates":
                value = int(value)

            database.update_user_param(target_username, param, value)
            confirm = await callback.message.answer(
                f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä `{escape_md(param)}` –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ `{escape_md(str(value))}`",
                parse_mode=None
            )
            await callback.answer()

        elif data[0] == "edit_access":
            _, days, target_username = data
            days = int(days)

            if not check_edit_permission(current_user, target_username):
                return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)

            if days == -1:
                new_date = "01.01.2000"
            elif days == 0:
                new_date = "31.12.2099"
            else:
                new_date_obj = datetime.today() + timedelta(days=days)
                new_date = new_date_obj.strftime("%d.%m.%Y")

            database.update_user_param(target_username, "access_until", new_date)
            confirm = await callback.message.answer(
                f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è @{escape_md(target_username)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ `{escape_md(new_date)}`",
                parse_mode=None
            )
            await callback.answer()

        else:
            return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await sleep(3)
        try:
            await confirm.delete()
        except Exception:
            pass

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ edit_value_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


def setup_info(dp: Dispatcher):
    dp.message.register(info_command, Command("info"))
    dp.callback_query.register(edit_param_callback, F.data.startswith("edit:"))
    dp.callback_query.register(edit_value_callback, F.data.startswith(("edit_value:", "edit_access:")))
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /info –∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
