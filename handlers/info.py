from datetime import datetime, timedelta
from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import database, logger
from middleware.permissions import rights_required
from utils.formatters import format_revenue, escape_md


# === /info ===
@rights_required(["root", "admin", "moder"], self_only_rights=["moder"])
async def info_command(message: types.Message):
    args = message.text.split(maxsplit=1)
    target_username = args[1] if len(args) > 1 else message.from_user.username or "unknown_user"
    current_user = message.from_user.username or "unknown_user"

    if not database.user_exists(target_username):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{escape_md(target_username)}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode="Markdown")
        return

    user_data = database.get_user(target_username)
    if not user_data:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è `{escape_md(target_username)}`.", parse_mode="Markdown")
        return

    # –ï—Å–ª–∏ moder ‚Äî –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    display_name = "—Å–µ–±—è" if target_username == current_user else f"`{escape_md(target_username)}`"
    is_self = (target_username == current_user)

    rights = escape_md(user_data.get('rights'))
    category = escape_md(user_data.get('category'))

    # === –†–∞—Å—á–µ—Ç –¥–∞—Ç ===
    today = datetime.today().date()
    dates_count = user_data.get('dates', 0)
    end_date = today - timedelta(days=1)
    start_date = end_date - timedelta(days=dates_count - 1) if dates_count > 0 else end_date
    dates_text = (
        f"{dates_count} –¥–Ω–µ–π (—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')})"
        if dates_count > 0 else "–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
    )

    # === –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ===
    info_text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {display_name}:\n\n"
    )
    if rights == "root"  or not is_self:
        info_text += f"–ü—Ä–∞–≤–∞: {rights}\n"

    info_text += (
        f"–î–∞—Ç—ã: {dates_text}\n"
        f"–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ–±–æ—Ä–æ—Ç–∞: {user_data.get('turnover_days_max')}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {format_revenue(user_data.get('revenue_min'))}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
    )

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ ===
    user_rights = database.get_user(current_user).get("rights", "user")
    kb = InlineKeyboardBuilder()

    # Root –≤–∏–¥–∏—Ç –≤—Å–µ
    if user_rights == "root":
        for param, label in [
            ("rights", "üõ† –ü—Ä–∞–≤–∞"),
            ("turnover_days_max", "üìà –û–±–æ—Ä–æ—Ç"),
            ("revenue_min", "üí∞ –í—ã—Ä—É—á–∫–∞"),
            ("category", "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            ("dates", "üìÖ –î–∞—Ç—ã"),
        ]:
            kb.button(text=label, callback_data=f"edit:{param}:{target_username}")

    # Admin –≤–∏–¥–∏—Ç –≤—Å—ë, –∫—Ä–æ–º–µ –ø—Ä–∞–≤
    elif user_rights == "admin":
        for param, label in [
            ("turnover_days_max", "üìà –û–±–æ—Ä–æ—Ç"),
            ("revenue_min", "üí∞ –í—ã—Ä—É—á–∫–∞"),
            ("category", "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            ("dates", "üìÖ –î–∞—Ç—ã"),
        ]:
            kb.button(text=label, callback_data=f"edit:{param}:{target_username}")

    # Moder –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    elif user_rights == "moder" and is_self:
        for param, label in [
            ("turnover_days_max", "üìà –û–±–æ—Ä–æ—Ç"),
            ("revenue_min", "üí∞ –í—ã—Ä—É—á–∫–∞"),
            ("category", "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            ("dates", "üìÖ –î–∞—Ç—ã"),
        ]:
            kb.button(text=label, callback_data=f"edit:{param}:{target_username}")

    kb.adjust(2)

    await message.answer(
        info_text,
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

    logger.info(f"{current_user} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {target_username}")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
def setup_info(dp: Dispatcher) -> None:
    dp.message.register(info_command, Command("info"))
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /info –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
