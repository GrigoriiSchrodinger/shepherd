from typing import Awaitable, Callable, Dict, Any
from aiogram import types
from database.user_repository import UserRepository
from config import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

class AuthMiddleware:
    def __init__(self):
        self.user_repo = UserRepository()

    async def __call__(
        self,
        handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
    ) -> Any:
        user = event.from_user
        user_id = user.id
        username = user.username or "no_username"
        command = event.text or "no_command"

        log_context = {
            "user_id": user_id,
            "username": username,
            "command": command,
            "chat_type": event.chat.type,
            "message_id": event.message_id,
            "timestamp": event.date.isoformat()
        }

        if not user.username:
            logger.warning(
                "Access attempt without username", 
                extra={"context": log_context}
            )
            await event.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram username")
            return

        if not self.user_repo.user_exists(user.username):
            logger.warning(
                "Unauthorized access attempt",
                extra={"context": log_context}
            )
            await event.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–∞—à username –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return

        logger.info(
            "Successful access", 
            extra={"context": log_context}
        )
        return await handler(event, data)