import inspect
from aiogram import types
from config import logger, database


def rights_required(allowed_rights: list, self_only_rights: list = None):
    self_only_rights = self_only_rights or []

    def decorator(handler):
        async def wrapper(event: types.TelegramObject, *args, **kwargs):
            # üß© –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if isinstance(event, types.Message):
                user = event.from_user
                message = event
            elif isinstance(event, types.CallbackQuery):
                user = event.from_user
                message = event.message
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event)}")
                return

            username = user.username or str(user.id)

            # üóÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            user_data = database.get_user(username)
            if not user_data:
                await message.answer(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode="Markdown"
                )
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                return

            user_rights = user_data.get("rights")

            # üö´ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if user_rights not in allowed_rights:
                await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                logger.warning(f"‚ùå {username} –ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–∞–≤ ({user_rights})")
                return

            # üîí –ï—Å–ª–∏ moder –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è
            if user_rights in self_only_rights:
                target_username = None

                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä /info <user>)
                if isinstance(event, types.Message):
                    args_split = message.text.split(maxsplit=2)
                    if len(args_split) > 1:
                        target_username = args_split[1].lstrip("@")

                # –ï—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –∫–Ω–æ–ø–∫–µ)
                elif isinstance(event, types.CallbackQuery):
                    if ":" in event.data:
                        parts = event.data.split(":")
                        target_username = parts[-1].lstrip("@")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: moder –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                if target_username and target_username != username:
                    await message.answer("üö´ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è.")
                    logger.warning(f"‚ùå {username} –ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ ({target_username})")
                    return

            # üß© –í—ã–∑—ã–≤–∞–µ–º —Å–∞–º —Ö—ç–Ω–¥–ª–µ—Ä (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
            sig = inspect.signature(handler)
            valid_kwargs = {k: v for k, v in kwargs.items() if k in sig.parameters}

            return await handler(event, *args, **valid_kwargs)

        return wrapper
    return decorator

def check_edit_permission(current_user: str, target_username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ current_user –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å target_username.
    """
    current = database.get_user(current_user)
    target = database.get_user(target_username)

    if not current or not target:
        return False

    # root –º–æ–∂–µ—Ç –≤—Å–µ—Ö
    if current["rights"] == "root":
        return True

    # admin –º–æ–∂–µ—Ç moder –∏ user
    if current["rights"] == "admin" and target["role"] in ("moder", "user"):
        return True

    # moder –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ user
    if current["rights"] == "moder" and target["role"] == "user":
        return True

    # user ‚Äî —Ç–æ–ª—å–∫–æ —Å–µ–±—è
    if current_user == target_username:
        return True

    return False
