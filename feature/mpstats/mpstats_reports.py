import json
import os
from datetime import datetime
from typing import Tuple, List

import pandas as pd

from api.mpstats_api import MpstatsAPI
from api.mpstats_module import MpstatsData, Product
from config import logger
from feature.excel.excel import BaseExcelReport
from feature.excel.excel_builder import ExcelBuilder
from utils.formatters import (
    format_currency,
    get_turnover_value,
    get_wb_link,
    build_mpstats_link
)

class MpstatsExcelReport(BaseExcelReport):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel-–æ—Ç—á—ë—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º MPStats."""
    def __init__(self):
        self.api = MpstatsAPI(os.getenv("MPSTATS_API_TOKEN"))
        self.excel = ExcelBuilder("–¢–æ–≤–∞—Ä—ã")
        logger.info("üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MPStats-–æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def generate_report(
        self,
        start_date: str,
        end_date: str,
        category: str,
        turnover_days_max: int,
        revenue_min: int,
        drop_threshold_percent: float
    ):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞."""
        try:
            self.validate_dates(start_date, end_date)
            products, _ = await self._fetch_api_data(start_date, end_date, category)
            df = self._prepare_dataframe(products, start_date, end_date, turnover_days_max, revenue_min, drop_threshold_percent)
            return self.excel.build(df, self._get_columns_config())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}", exc_info=True)
            raise

    async def _fetch_api_data(self, start_date: str, end_date: str, category: str) -> Tuple[List[Product], dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MPStats API."""
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Å {start_date} –ø–æ {end_date}")
        raw_data = await self.api.get_category_data(start_date, end_date, category)
        logger.debug("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:\n%s", json.dumps(raw_data, indent=2, ensure_ascii=False))

        items = raw_data.get("data", []) if isinstance(raw_data, dict) else raw_data
        return MpstatsData(items).products, raw_data

    def _prepare_dataframe(
        self,
        products: List[Product],
        start_date: str,
        end_date: str,
        turnover_days_max: int,
        revenue_min: int,
        drop_threshold_percent: float
    ) -> pd.DataFrame:
        """–°–æ–∑–¥–∞—ë—Ç DataFrame –¥–ª—è –æ—Ç—á—ë—Ç–∞."""
        filtered = self._filter_products(products, turnover_days_max, revenue_min, start_date, end_date, drop_threshold_percent)
        logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(filtered)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(products)}")

        rows = []
        for idx, product in enumerate(filtered, start=1):
            try:
                rows.append(self._product_to_row(idx, product, start_date, end_date))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ #{idx}: {e}")

        return pd.DataFrame(rows)

    @staticmethod
    def _filter_products(
            products: List[Product],
            turnover_days_max: int,
            revenue_min: int,
            start_date: str,
            end_date: str,
            drop_threshold_percent: float
    ) -> List[Product]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–±–æ—Ä–æ—Ç—É, –≤—ã—Ä—É—á–∫–µ, –¥–∞—Ç–µ –ø–µ—Ä–≤–æ–≥–æ SKU –∏ —Ä–µ–∑–∫–æ–º—É –ø–∞–¥–µ–Ω–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤."""
        start_dt = datetime.strptime(start_date, "%Y-%m-%d")
        end_dt = datetime.strptime(end_date, "%Y-%m-%d")

        def has_sharp_drop(stocks_graph: List[int]) -> bool:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É."""
            if not stocks_graph or len(stocks_graph) < 2:
                return False
            for i in range(len(stocks_graph) - 1):
                current = stocks_graph[i]
                next_val = stocks_graph[i + 1]
                if current == 0:
                    continue
                drop_percent = (current - next_val) / current * 100
                if drop_percent >= drop_threshold_percent:
                    return True
            return False

        filtered = []
        for p in products:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Ä–æ—Ç –∏ –≤—ã—Ä—É—á–∫—É
            if p.turnover_days >= turnover_days_max or p.revenue <= revenue_min:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º sku_first_date
            if p.sku_first_date:
                try:
                    sku_dt = datetime.strptime(p.sku_first_date, "%Y-%m-%d")
                    if not (start_dt <= sku_dt <= end_dt):
                        continue
                except Exception:
                    # –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
                    pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            stocks_graph = p.raw_data.get("stocks_graph", [])
            if not has_sharp_drop(stocks_graph):
                continue

            filtered.append(p)
        return filtered

    @staticmethod
    def _product_to_row(idx: int, product: Product, start_date: str, end_date: str) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–æ–≤–∞—Ä –≤ —Å—Ç—Ä–æ–∫—É –æ—Ç—á—ë—Ç–∞."""
        return {
            "‚Ññ": idx,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": product.name,
            "–í—ã—Ä—É—á–∫–∞": format_currency(product.revenue),
            "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å": get_turnover_value(product.raw_data),
            "–°—Å—ã–ª–∫–∞ WB": get_wb_link(product.id),
            "MPStats": build_mpstats_link(product.id, start_date, end_date),
        }

    @staticmethod
    def _get_columns_config() -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫."""
        return {
            "A": 8,   # ‚Ññ
            "B": 50,  # –ù–∞–∑–≤–∞–Ω–∏–µ
            "C": 20,  # –í—ã—Ä—É—á–∫–∞
            "D": 20,  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å
            "E": 50,  # –°—Å—ã–ª–∫–∞ WB
            "F": 60,  # MPStats
        }

