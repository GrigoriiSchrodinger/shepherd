import os
import json
from datetime import datetime
from io import BytesIO
from typing import List, Dict, Tuple

import pandas as pd

from api.mpstats_api import MpstatsAPI
from api.mpstats_module import MpstatsData, Product
from config import logger, DATE_FORMAT


# === –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å ===
class BaseExcelReport:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á—ë—Ç–æ–≤."""

    @staticmethod
    def _validate_dates(start_date: str, end_date: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç."""
        now = datetime.now().date()
        try:
            start_dt = datetime.strptime(start_date, DATE_FORMAT).date()
            end_dt = datetime.strptime(end_date, DATE_FORMAT).date()
        except ValueError as e:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD") from e

        if start_dt > end_dt:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")

        if start_dt > now or end_dt > now:
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞—Ç—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ")

    @staticmethod
    def _format_currency(value: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –∫–∞–∫ –≤–∞–ª—é—Ç—É."""
        return f"{int(value):,} ‚ÇΩ".replace(",", " ") if value > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    @staticmethod
    def _create_excel(df: pd.DataFrame, columns_config: Dict[str, int], sheet_name: str = "–û—Ç—á—ë—Ç") -> BytesIO:
        """–°–æ–∑–¥–∞—ë—Ç Excel-—Ñ–∞–π–ª –∏–∑ DataFrame."""
        output = BytesIO()
        with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
            df.to_excel(writer, index=False, sheet_name=sheet_name)
            worksheet = writer.sheets[sheet_name]

            for col, width in columns_config.items():
                worksheet.set_column(f"{col}:{col}", width)

        output.seek(0)
        return output


# === –ö–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ –¥–ª—è MPStats ===
class MpstatsExcelReport(BaseExcelReport):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel-–æ—Ç—á—ë—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º MPStats."""

    def __init__(self):
        self.api = MpstatsAPI(os.getenv("MPSTATS_API_TOKEN"))
        logger.info("üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MPStats-–æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def generate(self, start_date: str, end_date: str, category: str) -> BytesIO:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞."""
        try:
            self._validate_dates(start_date, end_date)
            products, _ = await self._fetch_api_data(start_date, end_date, category)
            df = self._prepare_dataframe(products, start_date, end_date)
            return self._create_excel(df, self._get_columns_config(), "–¢–æ–≤–∞—Ä—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}", exc_info=True)
            raise

    async def _fetch_api_data(self, start_date: str, end_date: str, category: str) -> Tuple[List[Product], dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MPStats API."""
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Å {start_date} –ø–æ {end_date}")
        raw_data = await self.api.get_category_data(start_date, end_date, category)
        logger.debug("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:\n%s", json.dumps(raw_data, indent=2, ensure_ascii=False))

        items = raw_data.get("data", []) if isinstance(raw_data, dict) else raw_data
        return MpstatsData(items).products, raw_data

    def _prepare_dataframe(self, products: List[Product], start_date: str, end_date: str) -> pd.DataFrame:
        """–°–æ–∑–¥–∞—ë—Ç DataFrame –¥–ª—è –æ—Ç—á—ë—Ç–∞."""
        report_rows = []
        logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

        for idx, product in enumerate(products, start=1):
            try:
                if product.turnover_days < 10 and product.revenue > 300_000:
                    report_rows.append({
                        "‚Ññ": idx,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": product.name,
                        "–í—ã—Ä—É—á–∫–∞": self._format_currency(product.revenue),
                        "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å": self._get_turnover_value(product.raw_data),
                        "–°—Å—ã–ª–∫–∞ WB": self._get_wb_link(product.id),
                        "MPStats": self._build_mpstats_link(product.id, start_date, end_date)
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ #{idx}: {e}")

        return pd.DataFrame(report_rows)

    @staticmethod
    def _get_turnover_value(raw_data: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏."""
        turnover_days = raw_data.get("turnover_days")
        if turnover_days is None:
            logger.warning("‚è≥ –ü–∞—Ä–∞–º–µ—Ç—Ä turnover_days –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return "–ù/–î"
        return f"{int(turnover_days)} –¥–Ω."

    @staticmethod
    def _get_wb_link(product_id: int) -> str:
        return f"https://www.wb.ru/catalog/{product_id}/detail.aspx"

    @staticmethod
    def _build_mpstats_link(product_id: int, start_date: str, end_date: str) -> str:
        start_fmt = datetime.strptime(start_date, DATE_FORMAT).strftime("%d.%m.%Y")
        end_fmt = datetime.strptime(end_date, DATE_FORMAT).strftime("%d.%m.%Y")
        return f"https://mpstats.io/wb/item/{product_id}?d1={start_fmt}&d2={end_fmt}"

    @staticmethod
    def _get_columns_config() -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫."""
        return {
            "A": 8,   # ‚Ññ
            "B": 50,  # –ù–∞–∑–≤–∞–Ω–∏–µ
            "C": 20,  # –í—ã—Ä—É—á–∫–∞
            "D": 20,  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å
            "E": 50,  # –°—Å—ã–ª–∫–∞ WB
            "F": 60,  # MPStats
        }
